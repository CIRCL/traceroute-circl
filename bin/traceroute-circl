#!/usr/bin/perl
#
# traceroute-circl - Traceroute improved wrapper for CSIRT and CERT operators
#
# Copyright (C) 2010 CIRCL Computer Incident Response Center Luxembourg (smile gie)
# Copyright (C) 2010 Alexandre Dulaunoy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use utf8;

use Getopt::Compact;

use Net::Whois::RIS;
use IP::Country::Fast;
use Net::Abuse::Utils;
use Locale::Country;
use LWP::Simple;
use JSON;

$| = 1;

my $country = IP::Country::Fast->new();
my $ris     = Net::Whois::RIS->new();
my $opt     = new Getopt::Compact(
    name    => 'traceroute-circl',
    modes   => [qw(debug)],
    version => '0.1',
    struct  => [
        [ [qw(i ip)],  qq(IP address to lookup), ':s' ],
        [ [qw(r rbl)], qq(RBL domain to lookup), ':s' ],
        [
            [qw(c country)],
            qq(Country ISO code to highlight (!!) in the output), ':s'
        ],
        [ [qw(f fullcountry)], qq(Display full country name),      ':s' ],
        [ [qw(m geomap)],      qq(Output file for the google map), ':s' ],
        [ [qw(h help)],        qq(This help message),              ':s' ]
    ]
);

my $opts = $opt->opts;

if ( !defined( $opts->{ip} ) ) {
    print $opt->usage();
    print "You must at least specify an IP address to lookup\n";
    exit();
}

my $gmap;
my $gmapmarker;
my $hop = 0;

my $ip = $opts->{ip};

open( TRACEROUTE, '-|' ) || exec "traceroute", $ip;

while (<TRACEROUTE>) {

    my $original = $_;
    my @x = split( /\(/, $_ );
    my $r;
    $hop = $hop + 1;
    if ( $x[1] =~ m/\)/ ) {
        my $tip = $`;
        my $lcountry;
        if ( !defined( $opts->{fullcountry} ) ) {
            $lcountry = $country->inet_atocc($tip);
        }
        else {
            $lcountry = code2country( $country->inet_atocc($tip) );
        }
        if ( defined( $opts->{geomap} ) ) {
            my $loc =
              GetCountryLatLng( code2country( $country->inet_atocc($tip) ) );
            if ( defined($loc) ) {
                GmapAddLine($loc);
                GmapAddMarker( $loc, $hop );
            }
        }
        $r .= "  Country:" . $lcountry;
        my $abuse = join( ' ', Net::Abuse::Utils::get_ipwi_contacts($tip) );
        $r .= "  Abuse contact:" . $abuse . "\n";
        $ris->getIPInfo($tip);
        $r .=
            "  ASN (RIS):"
          . $ris->getOrigin() . " "
          . $ris->getDescr()
          . " ASN INFO:"
          . join( ' ', Net::Abuse::Utils::get_asn_info($tip) );

        if ( defined( $opts->{rbl} ) ) {
            $r .= " RBL:"
              . Net::Abuse::Utils::get_dnsbl_listing( $tip, $opts->{rbl} );
        }
    }

    if ( defined( $opts->{country} ) ) {
        if ( $r =~ m/$opts->{country}/g ) {
            print "!!" . $original;
            print "!!" . $r . " \n";
        }
        else {
            print $original;
            print $r. " \n";
        }
    }
    else {
        print $original;
        print $r. " \n";
    }
}

if ( defined( $opts->{geomap} ) ) {
    my $mapd = GmapDisplay( $gmap, $gmapmarker );
    open( OUTFILE, ">./" . $opts->{geomap} );
    print OUTFILE $mapd;
    close(OUTFILE);
}

close(TRACEROUTE);

sub GetCountryLatLng {

    my $country = shift;

    my $gmapurl = "http://maps.google.com/maps/geo?q=" . $country;
    my $c       = get($gmapurl);
    if ( $c =~ m/\"name\": \"0.000000,0\.000000\"/ ) {
        return undef;
    }
    use Encode;
    my $gmap = JSON->new->decode( decode "UTF-8", $c );
    return $gmap->{Placemark}[0]->{Point}->{coordinates}[1] . ","
      . $gmap->{Placemark}[0]->{Point}->{coordinates}[0];
}

sub GmapAddLine {
    my $location = shift;
    $gmap .= "new GLatLng(" . $location . "),";
}

sub GmapAddMarker {
    my $location = shift;
    my $text     = shift;
    $gmapmarker .=
        "\nmap.addOverlay(new GMarker(new GLatLng("
      . $location
      . "), markerOptions={title:\""
      . $text
      . "\"} ));";
}

sub GmapDisplay {
    my $jsparam  = shift;
    my $jsmarker = shift;

    my $js = <<JSCODE;
    <script type="text/javascript">
    function initialize() {
      if (GBrowserIsCompatible()) {
        var map = new GMap2(document.getElementById("map_canvas"));
        map.setCenter(new GLatLng(50, 4), 2);
         map.setUIToDefault();
        var polyline = new GPolyline([
JSCODE

    my $jsclose = <<JSCODEEND;
                ], "#ff0000", 5);
                map.addOverlay(polyline);
JSCODEEND

    my $jsclosejs = <<JSCODEENDJS;
}
}
</script>
JSCODEENDJS

    return $js . $jsparam . $jsclose . $jsmarker . $jsclosejs;
}
